#!/usr/bin/env bash
# This file based in part on the mkinitramfs script for the LFS LiveCD
# written by Alexander E. Patrakov and Jeremy Huntwork.

function main() {
    if [[ "$#" -ne 2 ]]; then
        echo "Usage: $0 <kernel_version> <output_file>"
        exit 1
    fi

    declare kver="$1"
    declare initramfs_file="$2"

    echo "Generating $initramfs_file (Linux v$kver)..."

    # Create a temporary directory to work in
    declare workdir="$(mktemp -d)"

    # Create a directory to store the name of libraries to import
    declare unsorted=$(mktemp)

    # Create the base directory structure
    mkdir -p $workdir/{dev,usr/bin,run,sys,proc}
    mkdir -p $workdir/usr/lib64/{firmware,systemd}
    mkdir -p $workdir/etc/{modprobe.d,udev/rules.d}

    ln -s usr/lib64 $workdir/lib
    ln -s usr/lib64 $workdir/lib64
    ln -s lib64 $workdir/usr/lib
    ln -s usr/bin $workdir/bin
    ln -s usr/bin $workdir/sbin

    touch $workdir/etc/modprobe.d/modprobe.conf

    # Create the necessary device nodes
    mknod -m 640 $workdir/dev/console c 5 1
    mknod -m 664 $workdir/dev/null    c 1 3

    # Install the udev configuration files
    if [[ -f /etc/udev/udev.conf ]]; then
        cp /etc/udev/udev.conf $workdir/etc/udev/udev.conf
    fi

    for file in $(find /etc/udev/rules.d/ -type f); do
        cp $file $workdir/etc/udev/rules.d
    done

    # Install any firmware present
    if [[ -d /usr/lib64/firmware ]]; then
        cp -a /usr/lib64/firmware $workdir/usr/lib64
    fi

    # Copy the init script
    cp -r /usr/share/mkinitramfs/init $workdir/usr/bin/

    # Binaries we'll need to copy from the host that the init script requires
    declare binaries="sh cat cp dd killall ls mkdir mknod mount umount sed"
    declare binaries="$binaries sleep ln rm uname readlink basename modprobe"
    declare binaries="$binaries blkid switch_root lsmod insmod kmod udevadm"

    # Install binaries
    for f in $binaries ; do
        ldd /usr/bin/$f | sed "s/\t//" | cut -d " " -f1 >> $unsorted
        cp /usr/bin/$f $workdir/usr/bin
    done

    # Add udevd libraries
    if [[ -x /usr/lib64/udev/udevd ]] ; then
        ldd /usr/lib64/udev/udevd | sed "s/\t//" | cut -d " " -f1 >> $unsorted
    elif [[ -x /usr/lib64/systemd/systemd-udevd ]] ; then
        ldd /usr/lib64/systemd/systemd-udevd | sed "s/\t//" | cut -d " " -f1 >> $unsorted
    fi

    # Install libraries
    sort $unsorted | uniq | while read library ; do
        if [[ "$library" == "linux-vdso.so.1" ]] || [[ "$library" == "linux-gate.so.1" ]]; then
            continue
        fi
        if [[ "$library" == "/lib64/ld-linux-x86-64.so.2" ]]; then
            cp "$library" "$workdir/$library"
        elif [[ -f "/usr/lib64/$library" ]]; then
            cp /usr/lib64/$library $workdir/usr/lib64
        elif [[ -f "/usr/lib64/systemd/$library" ]]; then
            cp /usr/lib64/systemd/$library $workdir/usr/lib64/systemd/
        else
            echo "Can't find library $library. Aborting."
            exit 1
        fi
    done

    # Copy the udev and systemd directories
    if [[ -d /usr/lib64/udev ]]; then
        cp -a /usr/lib64/udev $workdir/usr/lib64
    fi
    if [[ -d /usr/lib64/systemd ]]; then
        cp -a /usr/lib64/systemd $workdir/usr/lib64
    fi
    if [[ -d /usr/lib64/elogind ]]; then
        cp -a /usr/lib64/elogind $workdir/usr/lib64
    fi

    # Install the kernel modules if requested
    if [ -n "$kver" ]; then
        find                                                                     \
            /usr/lib64/modules/$kver/kernel/{crypto,fs,lib}                      \
            /usr/lib64/modules/$kver/kernel/drivers/{block,ata,md,firewire}      \
            /usr/lib64/modules/$kver/kernel/drivers/{scsi,message,pcmcia,virtio} \
            /usr/lib64/modules/$kver/kernel/drivers/usb/{host,storage}           \
            -type f 2> /dev/null | cpio --make-directories -p --quiet $workdir

        mkdir -p $workdir/usr/lib64/modules/$kver

        cp /usr/lib64/modules/$kver/modules.{builtin,order}                      \
            $workdir/usr/lib64/modules/$kver

        depmod -b $workdir $kver
    fi

    # Generate the initramfs
    ( cd $workdir ; find . | cpio -o -H newc --quiet ) > $initramfs_file
    #xz -e --check=none -z -f -9

    # Remove the temporary directory and file
    rm -rf $workdir $unsorted

    echo "done."
}

main $@
